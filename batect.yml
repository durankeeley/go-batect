containers:
  terraform:
    image: hashicorp/terraform:latest
    volumes:
      - local: .
        container: /code
    working_directory: /code

  tfsec:
    image: aquasec/trivy:latest
    volumes:
      - local: .
        container: /code
    working_directory: /code

  bash:
    image: bash:latest
    volumes:
      - local: .
        container: /code
    working_directory: /code

  git:
    image: alpine/git:latest
    volumes:
      - local: .
        container: /code
    working_directory: /code

  golang:
    image: golang:latest
    volumes:
      - local: .
        container: /code
    working_directory: /code

  golang2:
    build: ./docker
    volumes:
      - local: .
        container: /code
    working_directory: /code

tasks:
  build:
    description: '"Builds" the Terraform code, confirming the syntax is valid'
    run:
      container: terraform
      command: validate

  format:
    description: Format all Terraform code
    run:
      container: terraform
      command: fmt -recursive /code
  
  check-format:
    description: Check formatting issues of Terraform code
    run:
      container: terraform
      command: fmt -recursive -check -diff /code

  security-scan:
    description: Runs 'tfsec' security scanner
    run:
      container: tfsec
      command: config /code
  
  check-all:
    description: Runs all the code checks
    prerequisites:
      - build
      - check-format
      - security-scan

  list-all-files:
    description: Lists all the files
    run:
      container: bash
      command: ls 

  new-branch:
    description: Creates a new branch
    shell: true
    shell_executable: sh
    run:
      container: git
      command: git config --global --add safe.directory /code && git switch -c "new_branch"

  build-golang:
    description: Builds the binaries from this Go project
    shell: true
    shell_executable: sh
    run:
      container: golang
      command: env GOOS=windows GOARCH=amd64 go build -o "go-batect.exe" -buildvcs=false && env GOOS=linux GOARCH=amd64 go build -o "go-batect" -buildvcs=false
      # command: go build -o "go-batect" -buildvcs=false

  build-golang2:
    description: Builds the Go application
    shell: true
    shell_executable: sh
    run:
      container: golang2
      command: env GOOS=windows GOARCH=amd64 go build -o "go-batect.exe" -buildvcs=false && env GOOS=linux GOARCH=amd64 go build -o "go-batect" -buildvcs=false
      # command: ls
